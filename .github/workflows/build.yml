name: Build
on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  packages: write
  pull-requests: read
jobs:
  commitlint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch-depth is required

      - uses: wagoid/commitlint-github-action@v6

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for pre-commit to be able scan history

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install dependencies
        run: go install ./...

      - name: go-vet
        run: go vet -v ./...

      - name: go-test
        run: go test -v ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6

      - uses: pre-commit/action@v3.0.1

  e2e-tests-mongodb:
    runs-on: ubuntu-latest
    env:
      GOBBLR_CONNECTION_URI: mongodb://localhost:27017/gobblr
      GOBBLR_DATABASE: gobblr
      GOBBLR_PATH: ./examples/simple/data
    services:
      mongodb:
        image: mongo:8.0
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - run: go run . db mongodb

  e2e-tests-mysql:
    runs-on: ubuntu-latest
    env:
      GOBBLR_DATABASE: app
      GOBBLR_HOST: localhost
      GOBBLR_PASSWORD: password
      GOBBLR_USERNAME: app
      GOBBLR_PATH: ./examples/simple/data
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: app
          MYSQL_RANDOM_ROOT_PASSWORD: "true"
          MYSQL_PASSWORD: password
          MYSQL_USER: app
        ports:
          - 3306:3306
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: migration
        working-directory: ./examples/simple/migrations
        env:
          DB_CONNECTION: app:password@tcp(localhost:3306)/app
          DB_TYPE: mysql
        run: go run .

      - run: go run . db sql mysql

  e2e-tests-pgsql:
    runs-on: ubuntu-latest
    env:
      GOBBLR_DATABASE: app
      GOBBLR_HOST: localhost
      GOBBLR_PASSWORD: password
      GOBBLR_USERNAME: app
      GOBBLR_PATH: ./examples/simple/data
    services:
      pgsql:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: app
          POSTGRES_PASSWORD: password
          POSTGRES_USER: app
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: migration
        working-directory: ./examples/simple/migrations
        env:
          DB_CONNECTION: user=app password=password host=localhost port=5432 dbname=app
          DB_TYPE: postgres
        run: go run .

      - run: go run . db sql postgres

  e2e-tests-sqlite:
    runs-on: ubuntu-latest
    env:
      GOBBLR_FILE: ${{ github.workspace }}/sqlite.db
      GOBBLR_PATH: ./examples/simple/data
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create SQLite file
        run: touch ${GOBBLR_FILE}

      - name: migration
        working-directory: ./examples/simple/migrations
        env:
          DB_CONNECTION: ${{ env.GOBBLR_FILE }}
          DB_TYPE: sqlite
        run: go run .

      - run: go run . db sql sqlite

  e2e-tests-sqlserver:
    runs-on: ubuntu-latest
    env:
      GOBBLR_DATABASE: model
      GOBBLR_HOST: localhost
      GOBBLR_PASSWORD: Pa55w0rd
      GOBBLR_USERNAME: sa
      GOBBLR_PATH: ./examples/simple/data
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          MSSQL_SA_PASSWORD: Pa55w0rd
        ports:
          - 1433:1433
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: migration
        working-directory: ./examples/simple/migrations
        env:
          DB_CONNECTION: sqlserver://sa:Pa55w0rd@localhost:1433?database=model
          DB_TYPE: sqlserver
        run: go run .

      - run: go run . db sql sqlserver

  build:
    runs-on: ubuntu-latest
    needs:
      - commitlint
      - e2e-tests-mongodb
      - e2e-tests-mysql
      - e2e-tests-pgsql
      - e2e-tests-sqlite
      - e2e-tests-sqlserver
      - test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for goreleaser changelog to work correctly

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v8
        with:
          strip_tag_prefix: v

      - name: Generate Docker tag
        id: docker
        run: |
          if [ "${{ steps.branch-name.outputs.is_tag }}" = "true"  ];
          then
            # Latest tag
            IMG_NAME="ghcr.io/${GITHUB_REPOSITORY,,}:latest"
            # Tag name (usually vX.Y.Z)
            IMG_NAME="${IMG_NAME},ghcr.io/${GITHUB_REPOSITORY,,}:${{ steps.branch-name.outputs.tag }}"

            echo "image_name=${IMG_NAME}" >> "$GITHUB_OUTPUT"
            echo "platforms=linux/amd64,linux/arm64,linux/arm/v7" >> "$GITHUB_OUTPUT"
            echo "push=true" >> "$GITHUB_OUTPUT"
          else
            # Use branch naming convention
            TAG="branch-${{ steps.branch-name.outputs.current_branch }}"
            # Change "/" for "-"
            TAG="${TAG//\//-}"
            # Set to lowercase
            TAG="${TAG,,}"

            echo "image_name=ghcr.io/${GITHUB_REPOSITORY,,}:${TAG}" >> "$GITHUB_OUTPUT"
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
            echo "push=${{ github.ref == 'refs/heads/main' }}" >> "$GITHUB_OUTPUT"
          fi

          if [ "${{ steps.branch-name.outputs.is_tag }}" = "true"  ];
          then
            echo "version=${{ steps.branch-name.outputs.tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "version=development" >> "$GITHUB_OUTPUT"
          fi

          echo "container_tagged_image=ghcr.io/${GITHUB_REPOSITORY,,}:${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "commit_id=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"
          echo "gitRepo=github.com/${GITHUB_REPOSITORY}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            GIT_COMMIT=${{ steps.docker.outputs.commit_id }}
            GIT_REPO=${{ steps.docker.outputs.gitRepo }}
            VERSION=${{ steps.docker.outputs.version }}
          platforms: ${{ steps.docker.outputs.platforms }}
          push: ${{ steps.docker.outputs.push }}
          tags: ${{ steps.docker.outputs.image_name }},${{ steps.docker.outputs.container_tagged_image }}

      - name: Set up Go
        if: steps.branch-name.outputs.is_tag == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.20.0'

      - name: Run GoReleaser
        if: steps.branch-name.outputs.is_tag == 'true'
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GIT_REPO: ${{ steps.docker.outputs.gitRepo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
